---
- name: "Create directory for etcd binaries"
  file:
    path: "{{ etcd_bin }}"
    state: directory
    owner: root
    group: root
    mode: 0700
- name: "Download the tarball into the /tmp directory"
  get_url:
    url: https://github.com/etcd-io/etcd/releases/download/v3.4.15/etcd-v3.4.15-linux-amd64.tar.gz
    dest: /tmp/etcd.tar.gz
    owner: root
    group: root
    mode: 0600
    force: True
- name: "Extract the contents of the tarball"
  unarchive:
    src: /tmp/etcd.tar.gz
    dest: "{{ etcd_bin }}"
    owner: root
    group: root
    mode: 0600
    extra_opts:
      - --strip-components=1
    decrypt: True
    remote_src: True
- name: "Set permissions for etcd"
  file:
    path: "{{ etcd_bin }}/etcd"
    state: file
    owner: root
    group: root
    mode: 0700
- name: "Set permissions for etcdctl"
  file:
    path: "{{ etcd_bin }}/etcdctl"
    state: file
    owner: root
    group: root
    mode: 0700
- name: "Add /opt/etcd/bin/ to the $PATH environment variable"
  lineinfile:
    path: /etc/profile
    line: export PATH="$PATH:/opt/etcd/bin"
    state: present
    create: True
    insertafter: EOF
- name: "Set the ETCDCTL_API environment variable to 3"
  lineinfile:
    path: /etc/profile
    line: export ETCDCTL_API=3
    state: present
    create: True
    insertafter: EOF
- name: "Create a etcd data directory"
  file:
    path: /var/lib/etcd/{{ hostvars[inventory_hostname]['ansible_facts']['hostname'] }}.etcd
    state: directory
    owner: root
    group: root
    mode: 0755
- name: "Create directory for etcd configuration"
  file:
    path: /var/lib/etcd/{{ hostvars[inventory_hostname]['ansible_facts']['hostname'] }}.etcd
    state: "{{ item }}"
    owner: root
    group: root
    mode: 0700
  with_items:
    - absent
    - directory
- name: "Create directory for etcd configuration"
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - /etc/etcd
    - /etc/etcd/ssl
- name: "Create configuration file for etcd"
  template:
    src: templates/etcd.conf.yaml.j2
    dest: /etc/etcd/etcd.conf.yaml
    owner: root
    group: root
    mode: 0600
- name: "Copy over the CA certificate"
  copy:
    src: "{{ certs.ca_cert }}"
    remote_src: False
    dest: "{{ etcd_ssl}}/ca.pem"
    owner: root
    group: root
    mode: 0644
- name: "Copy over the `etcd` member certificate"
  copy:
    src: "{{ certs.etcd_cert }}"
    remote_src: False
    dest: "{{ etcd_ssl }}/kubernetes.pem"
    owner: root
    group: root
    mode: 0644
- name: "Copy over the `etcd` member key"
  copy:
    src: "{{ certs.etcd_key }}"
    remote_src: False
    dest: "{{ etcd_ssl }}/kubernetes-key.pem"
    owner: root
    group: root
    mode: 060
- name: "Create a etcd service file"
  copy:
    src: files/etcd.service
    remote_src: False
    dest: /etc/systemd/system/etcd.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart etcd
- name: Enable and start etcd
  ansible.builtin.service:
    name: etcd
    enabled: true
    state: started
- name: "Create directory for kubernetes libs"
  file:
    path: "{{ kubernetes_library }}"
    state: directory
    owner: root
    group: root
    mode: 0700
- name: "Create directory for kubernetes configs"
  file:
    path: "{{ kubernetes_configs }}"
    state: directory
    owner: root
    group: root
    mode: 0700
- name: "Download the kube-apiserver into the /usr/local/bin/ directory"
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-apiserver
    dest: /usr/local/bin/kube-apiserver
    owner: root
    group: root
    mode: 0700
    force: True
- name: "Download the kube-controller-manager into the /usr/local/bin/ directory"
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-controller-manager
    dest: /usr/local/bin/kube-controller-manager
    owner: root
    group: root
    mode: 0700
    force: True
- name: "Download the kube-scheduler into the /usr/local/bin/ directory"
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-scheduler
    dest: /usr/local/bin/kube-scheduler
    owner: root
    group: root
    mode: 0700
    force: True
- name: "Download the kubectl into the /usr/local/bin/ directory"
  get_url:
    url: https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
    dest: /usr/local/bin/kubectl
    owner: root
    group: root
    mode: 0700
    force: True
- name: "Copy over the CA certificate"
  copy:
    src: "{{ certs.ca_cert }}"
    remote_src: False
    dest: "{{ kubernetes_library }}/ca.pem"
    owner: root
    group: root
    mode: 0644
- name: "Copy over the CA key"
  copy:
    src: "{{ certs.ca_key }}"
    remote_src: False
    dest: "{{ kubernetes_library }}/ca-key.pem"
    owner: root
    group: root
    mode: 0644
- name: "Copy over the kubernetes certificate"
  copy:
    src: "{{ certs.etcd_cert }}"
    remote_src: False
    dest: "{{ kubernetes_library }}/kubernetes.pem"
    owner: root
    group: root
    mode: 0644
- name: "Copy over the kubernetes key"
  copy:
    src: "{{ certs.etcd_key }}"
    remote_src: False
    dest: "{{ kubernetes_library }}/kubernetes-key.pem"
    owner: root
    group: root
    mode: 0644
- name: "Copy over the service account certificate"
  copy:
    src: "{{ certs.service_account_cert }}"
    remote_src: False
    dest: "{{ kubernetes_library }}/service-account.pem"
    owner: root
    group: root
    mode: 0644
- name: "Copy over the service account key"
  copy:
    src: "{{ certs.service_account_key }}"
    remote_src: False
    dest: "{{ kubernetes_library }}/service-account-key.pem"
    owner: root
    group: root
    mode: 0644
- name: "Create a encryption-config file"
  template:
    src: encryption-config.yaml.j2
    dest: "{{ kubernetes_library }}/encryption-config.yaml"
    owner: root
    group: root
    mode: 0644  
- name: "Create a kube-apiserver service file"
  template:
    src: templates/kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart kube-apiserver
- name: Enable and start kube-apiserver
  ansible.builtin.service:
    name: kube-apiserver
    enabled: true
    state: started
- name: "Copy over the kube-scheduler kubeconfig"
  copy:
    src: "{{ source_configs_dir }}/kube-scheduler/kube-scheduler.kubeconfig"
    remote_src: False
    dest: "{{ kubernetes_library }}/kube-scheduler.kubeconfig"
    owner: root
    group: root
    mode: 0644
- name: "Copy over the kube-scheduler yaml"
  template:
    src: "templates/kube-schedular.yaml.j2"
    remote_src: False
    dest: "{{ kubernetes_configs }}/kube-scheduler.yaml"
    owner: root
    group: root
    mode: 0644
- name: "Create a kube-scheduler service file"
  template:
    src: templates/kube-scheduler.service.j2
    dest: /etc/systemd/system/kube-scheduler.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart kube-scheduler
- name: Enable and start kube-scheduler
  ansible.builtin.service:
    name: kube-scheduler
    enabled: true
    state: started
- name: "Copy over the kube-controller-manager config"
  copy:
    src: "{{ source_configs_dir }}/kube-controller/kube-controller-manager.kubeconfig"
    remote_src: False
    dest: "{{ kubernetes_library }}/kube-controller-manager.kubeconfig"
    owner: root
    group: root
    mode: 0644
- name: "Create a kube-controller-manager service file"
  template:
    src: templates/kube-controller-manager.service.j2
    dest: /etc/systemd/system/kube-controller-manager.service
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload systemd
    - Restart kube-controller-manager
- name: Enable and start kube-controller-manager
  ansible.builtin.service:
    name: kube-controller-manager
    enabled: true
    state: started
- name: "Create a hosts file"
  copy:
    src: files/hosts
    remote_src: False
    dest: /etc/hosts
    owner: root
    group: root
    mode: 0644
- name: Copy kube-apiserver-to-kubelet ClusterRole
  ansible.builtin.copy:
    src: "files/clusterrole.yaml"
    dest: "/tmp/clusterrole.yaml"
    mode: 0600
  run_once: true
- name: Copy kube-apiserver-to-kubelet ClusterRoleBinding
  ansible.builtin.copy:
    src: "files/clusterrolebinding.yaml"
    dest: "/tmp/clusterrolebinding.yaml"
    mode: 0600
  run_once: true
- name: "Copy over the admin config"
  copy:
    src: "{{ source_configs_dir }}/admin/admin.kubeconfig"
    remote_src: False
    dest: "{{ kubernetes_configs }}/admin.kubeconfig"
    owner: root
    group: root
    mode: 0644
- name: Wait 300 seconds for kube-apiserver port 6443 to become open on the host
  ansible.builtin.wait_for:
    port: 6443
    delay: 5
    host: 127.0.0.1
    timeout: 60
  run_once: true
- name: Apply kube-apiserver-to-kubelet ClusterRole
  ansible.builtin.shell: "kubectl apply --kubeconfig {{ kubernetes_configs }}/admin.kubeconfig -f /tmp/clusterrole.yaml"
  register: kube_apiserver_to_kubelet_cluster_role
  run_once: true
  changed_when: false
- name: Apply kube-apiserver-to-kubelet ClusterRoleBinding
  ansible.builtin.shell: "kubectl apply --kubeconfig {{ kubernetes_configs }}/admin.kubeconfig -f /tmp/clusterrolebinding.yaml"
  register: kube_apiserver_to_kubelet_cluster_role_binding
  run_once: true
  changed_when: false